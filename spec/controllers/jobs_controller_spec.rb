require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe JobsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # Valid attributes are generated using FactoryGirl
    FactoryGirl.attributes_for(:job)
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # JobsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do

    # Check to see if no jobs in db, return no_content response
    it 'returns no_content response if no jobs in database' do
      get :index, params: {}, session: valid_session
      expect(response).to_not have_http_status(204) # 204 is no_content http response
    end

    # Check to see if given app_id param it returns a successful response
    it 'returns success response given app_id param' do
      job = Job.create! valid_attributes
      get :index, params: {app_id: job.app_id}, session: valid_session
      expect(response).to be_success
    end

    # Check to see if given app_id and hook_identifier params it returns a successful response
    it 'returns success response given app_id and hook_identifier params' do
      job = Job.create! valid_attributes
      get :index, params: {app_id: job.app_id, hook_identifier: job.hook_identifier}, session: valid_session
      expect(response).to be_success
    end

    # Check to see if given app_id and client_campaign params it returns a successful response
    it 'returns success response given app_id and client_campaign params' do
      job = Job.create! valid_attributes
      get :index, params: {app_id: job.app_id, client_campaign: job.client_campaign}, session: valid_session
      expect(response).to be_success
    end


    it "returns a success response" do
      job = Job.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end


  end

  describe "GET #show" do
    it "returns a success response" do
      job = Job.create! valid_attributes
      get :show, params: {id: job.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do

      it "creates a new Job" do
        expect {
          post :create, params: {job: valid_attributes}, session: valid_session
        }.to change(Job, :count).by(1)
      end

      it "renders a JSON response with the new job" do

        post :create, params: {job: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(job_url(Job.last))
      end

      # Check to see if it renders and error response if job not saved
      it 'renders an error JSON response if new job not saved' do
        # Set job.save to false
        allow_any_instance_of(Job).to receive(:save).and_return(false)
        post :create, params: {job: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end

  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: "NewName"}
      }

      it "updates the requested job" do
        job = Job.create! valid_attributes
        put :update, params: {id: job.to_param, job: new_attributes}, session: valid_session
        job.reload
        job.name == "NewName"
      end

      it "renders a JSON response with the job" do
        job = Job.create! valid_attributes

        put :update, params: {id: job.to_param, job: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end

      # Check to see if it renders and error response if job not updated
      it 'renders an error JSON response if new job not updated' do
        job = Job.create! valid_attributes
        # Set job.update to false
        allow_any_instance_of(Job).to receive(:update).with(any_args).and_return(false)
        post :update, params: {id: job.to_param, job: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end

  end

  describe "DELETE #destroy" do
    it "destroys the requested job" do
      job = Job.create! valid_attributes
      expect {
        delete :destroy, params: {id: job.to_param}, session: valid_session
      }.to change(Job, :count).by(-1)
    end
  end




end
